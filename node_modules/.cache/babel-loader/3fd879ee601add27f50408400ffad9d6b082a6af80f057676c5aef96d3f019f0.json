{"ast":null,"code":"var _jsxFileName = \"/Users/evelyn/Desktop/EVA/GitHub/cobrinha/src/context/mainContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useMemo, useContext, createContext, useState, useEffect, useCallback, useRef } from \"react\";\nimport { addWormMove, getLocalJson, getRandomItemPosition, getRandomToken, isWormEating, setLocalJson, verifyMove } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst screenToken = getRandomToken();\nexport const MainContext = /*#__PURE__*/createContext({});\nexport function MainProvider({\n  children\n}) {\n  _s();\n  const blockSize = 30;\n  const docRef = useRef(null);\n\n  // scene options\n  const [status, setStatus] = useState(\"start\");\n  const [screens, setScreens] = useState({});\n  const [details, setDetails] = useState([]);\n  const [left, setLeft] = useState(Math.round(window.screenX));\n  const [top, setTop] = useState(Math.round(window.screenY));\n  const [horizontal, setHorizontal] = useState(Math.floor(window.innerWidth / blockSize));\n  const [vertical, setVerical] = useState(Math.floor(window.innerHeight / blockSize));\n\n  // worm options\n  const [moveDirection, setMoveDirection] = useState(\"right\");\n  const [wormBody, setWormBody] = useState([]);\n\n  // food options\n  const [foods, setFoods] = useState([]);\n  const startGame = useCallback(() => {\n    const foodPositions = [getRandomItemPosition(screens, blockSize), getRandomItemPosition(screens, blockSize)];\n\n    // set initial direction\n    localStorage.setItem(\"direction\", \"right\");\n    setMoveDirection(\"right\");\n\n    // set initial status\n    localStorage.setItem(\"status\", \"playing\");\n    setStatus(\"playing\");\n\n    // set main screen\n    localStorage.setItem(\"starter\", screenToken.toString());\n\n    // define start worm body\n    const startWormX = Math.round(screens[screenToken].left / blockSize);\n    const startWormY = Math.round(screens[screenToken].top / blockSize);\n    const wormBody = [[startWormX + 7, startWormY + 7], [startWormX + 6, startWormY + 7], [startWormX + 5, startWormY + 7]];\n    const details = [getRandomItemPosition(screens, blockSize), getRandomItemPosition(screens, blockSize), getRandomItemPosition(screens, blockSize), getRandomItemPosition(screens, blockSize)];\n\n    // set initial details\n    setLocalJson(\"details\", details);\n    setDetails(details);\n    setLocalJson(\"worm\", wormBody);\n    setWormBody(wormBody);\n    setLocalJson(\"foods\", foodPositions);\n    setFoods(foodPositions);\n  }, [screens]);\n  const changeDirectionHandle = useCallback(key => {\n    if (key.key === \"w\" && moveDirection !== \"bottom\") {\n      setMoveDirection(\"top\");\n      localStorage.setItem(\"direction\", \"top\");\n    }\n    if (key.key === \"a\" && moveDirection !== \"right\") {\n      setMoveDirection(\"left\");\n      localStorage.setItem(\"direction\", \"left\");\n    }\n    if (key.key === \"d\" && moveDirection !== \"left\") {\n      setMoveDirection(\"right\");\n      localStorage.setItem(\"direction\", \"right\");\n    }\n    if (key.key === \"s\" && moveDirection !== \"top\") {\n      setMoveDirection(\"bottom\");\n      localStorage.setItem(\"direction\", \"bottom\");\n    }\n  }, [moveDirection]);\n  const addNewFood = useCallback(foods => {\n    const newFood = foods;\n    newFood.push(getRandomItemPosition(screens, blockSize));\n    setLocalJson(\"foods\", newFood);\n    setFoods(newFood);\n  }, [screens]);\n  const addNewBlock = useCallback(() => {\n    const newWormBody = wormBody;\n    newWormBody.push([-10, -10]);\n    setLocalJson(\"worm\", newWormBody);\n    setWormBody(newWormBody);\n  }, [wormBody]);\n\n  // verify if is root screen\n  const isRoot = useCallback(() => {\n    const starter = localStorage.getItem(\"starter\");\n    if (starter === screenToken.toString()) return true;\n    return false;\n  }, []);\n\n  // reset screens local storage\n  useEffect(() => {\n    localStorage.setItem(\"start\", \"\");\n    localStorage.setItem(\"screens\", \"{}\");\n    localStorage.setItem(\"worm\", \"[]\");\n    localStorage.setItem(\"status\", \"start\");\n  }, []);\n\n  // change view size on resize screen\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      // set new sizes\n      setHorizontal(Math.floor(window.innerWidth / blockSize));\n      setVerical(Math.floor(window.innerHeight / blockSize));\n    });\n  }, [horizontal, vertical]);\n\n  // add worm move by time\n  useEffect(() => {\n    const wormCallback = () => {\n      if (status === \"playing\") {\n        const starter = localStorage.getItem(\"starter\");\n\n        // add worm move\n        if (starter === screenToken.toString()) {\n          const newBody = addWormMove(wormBody, moveDirection);\n          setLocalJson(\"worm\", newBody);\n          setWormBody(newBody);\n        }\n\n        // verify is valid move\n        const isValid = verifyMove(wormBody, screens, blockSize);\n        if (!isValid) {\n          setMoveDirection(\"right\");\n          setStatus(\"gameOver\");\n          localStorage.setItem(\"status\", \"gameOver\");\n        }\n\n        // add worm eat action\n        const cleanFoods = [...foods];\n        const ateFood = isWormEating(wormBody, foods);\n        if (starter === screenToken.toString() && ateFood !== false && ateFood !== true) {\n          cleanFoods.splice(ateFood, 1);\n          setLocalJson(\"foods\", cleanFoods);\n          setFoods(cleanFoods);\n          addNewFood(cleanFoods);\n          addNewBlock();\n        }\n      }\n    };\n    const intervalId = setInterval(wormCallback, 100);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [wormBody, foods, moveDirection]);\n\n  // change view position by time\n  useEffect(() => {\n    const updateWindowPosition = () => {\n      setLeft(Math.round(window.screenX));\n      setTop(Math.round(window.screenY));\n      const screens = getLocalJson(\"screens\");\n      screens[screenToken] = {\n        left,\n        top,\n        horizontal,\n        vertical\n      };\n      setScreens(screens);\n      setLocalJson(\"screens\", screens);\n    };\n    const intervalId = setInterval(updateWindowPosition, 50);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [horizontal, vertical, top, left]);\n\n  // on change local storage\n  useEffect(() => {\n    const handleStorageChange = () => {\n      var _getLocalJson, _getLocalJson2;\n      setFoods((_getLocalJson = getLocalJson(\"foods\")) !== null && _getLocalJson !== void 0 ? _getLocalJson : []);\n      setWormBody((_getLocalJson2 = getLocalJson(\"worm\")) !== null && _getLocalJson2 !== void 0 ? _getLocalJson2 : []);\n      setDetails(getLocalJson(\"details\"));\n      const status = localStorage.getItem(\"status\");\n      if (status === \"gameOver\" || status === \"start\" || status === \"playing\") setStatus(status);\n      const direction = localStorage.getItem(\"direction\");\n      if (direction === \"left\" || direction === \"right\" || direction === \"top\" || direction === \"bottom\") {\n        setMoveDirection(direction);\n        localStorage.setItem(\"direction\", direction);\n      }\n      const newScreens = getLocalJson(\"screens\");\n      newScreens[screenToken] = screens[screenToken];\n      setScreens(newScreens);\n    };\n    window.addEventListener(\"storage\", handleStorageChange);\n    return () => {\n      window.removeEventListener(\"storage\", handleStorageChange);\n    };\n  }, [screens]);\n\n  // build return values\n  const contextValue = useMemo(() => ({\n    blockSize,\n    left,\n    top,\n    horizontal,\n    vertical,\n    status,\n    docRef,\n    isRoot,\n    startGame,\n    foods,\n    screens,\n    wormBody,\n    details,\n    moveDirection,\n    changeDirectionHandle\n  }), [blockSize, left, top, horizontal, vertical, status, docRef, isRoot, startGame, foods, screens, wormBody, details, moveDirection, changeDirectionHandle]);\n  return /*#__PURE__*/_jsxDEV(MainContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n}\n_s(MainProvider, \"7IDqSXcAc+bv0qeKuobrspVJcjE=\");\n_c = MainProvider;\nexport const useMainContext = () => {\n  _s2();\n  return useContext(MainContext);\n};\n_s2(useMainContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"MainProvider\");","map":{"version":3,"names":["useMemo","useContext","createContext","useState","useEffect","useCallback","useRef","addWormMove","getLocalJson","getRandomItemPosition","getRandomToken","isWormEating","setLocalJson","verifyMove","jsxDEV","_jsxDEV","screenToken","MainContext","MainProvider","children","_s","blockSize","docRef","status","setStatus","screens","setScreens","details","setDetails","left","setLeft","Math","round","window","screenX","top","setTop","screenY","horizontal","setHorizontal","floor","innerWidth","vertical","setVerical","innerHeight","moveDirection","setMoveDirection","wormBody","setWormBody","foods","setFoods","startGame","foodPositions","localStorage","setItem","toString","startWormX","startWormY","changeDirectionHandle","key","addNewFood","newFood","push","addNewBlock","newWormBody","isRoot","starter","getItem","addEventListener","wormCallback","newBody","isValid","cleanFoods","ateFood","splice","intervalId","setInterval","clearInterval","updateWindowPosition","handleStorageChange","_getLocalJson","_getLocalJson2","direction","newScreens","removeEventListener","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMainContext","_s2","$RefreshReg$"],"sources":["/Users/evelyn/Desktop/EVA/GitHub/cobrinha/src/context/mainContext.tsx"],"sourcesContent":["import {\n  useMemo,\n  useContext,\n  createContext,\n  useState,\n  useEffect,\n  useCallback,\n  KeyboardEvent,\n  useRef,\n} from \"react\";\n\nimport {\n  addWormMove,\n  getLocalJson,\n  getRandomItemPosition,\n  getRandomToken,\n  isWormEating,\n  setLocalJson,\n  verifyMove,\n} from \"../utils\";\nimport { MainContextProps, MainProviderProps } from \"./types\";\nimport { Direction, FoodType, Screens, Status, WormBody } from \"../types\";\n\nconst screenToken = getRandomToken();\n\nexport const MainContext = createContext({} as MainContextProps);\n\nexport function MainProvider({ children }: MainProviderProps) {\n  const blockSize = 30;\n  const docRef = useRef(null);\n\n  // scene options\n  const [status, setStatus] = useState<Status>(\"start\");\n  const [screens, setScreens] = useState<Screens>({});\n  const [details, setDetails] = useState<number[][]>([]);\n  const [left, setLeft] = useState(Math.round(window.screenX));\n  const [top, setTop] = useState(Math.round(window.screenY));\n  const [horizontal, setHorizontal] = useState(\n    Math.floor(window.innerWidth / blockSize)\n  );\n  const [vertical, setVerical] = useState(\n    Math.floor(window.innerHeight / blockSize)\n  );\n\n  // worm options\n  const [moveDirection, setMoveDirection] = useState<Direction>(\"right\");\n  const [wormBody, setWormBody] = useState<WormBody>([]);\n\n  // food options\n  const [foods, setFoods] = useState<FoodType[]>([]);\n\n  const startGame = useCallback(() => {\n    const foodPositions = [\n      getRandomItemPosition(screens, blockSize),\n      getRandomItemPosition(screens, blockSize),\n    ];\n\n    // set initial direction\n    localStorage.setItem(\"direction\", \"right\");\n    setMoveDirection(\"right\");\n\n    // set initial status\n    localStorage.setItem(\"status\", \"playing\");\n    setStatus(\"playing\");\n\n    // set main screen\n    localStorage.setItem(\"starter\", screenToken.toString());\n\n    // define start worm body\n    const startWormX = Math.round(screens[screenToken].left / blockSize);\n    const startWormY = Math.round(screens[screenToken].top / blockSize);\n    const wormBody = [\n      [startWormX + 7, startWormY + 7],\n      [startWormX + 6, startWormY + 7],\n      [startWormX + 5, startWormY + 7],\n    ];\n    const details = [\n      getRandomItemPosition(screens, blockSize),\n      getRandomItemPosition(screens, blockSize),\n      getRandomItemPosition(screens, blockSize),\n      getRandomItemPosition(screens, blockSize),\n    ];\n\n    // set initial details\n    setLocalJson(\"details\", details);\n    setDetails(details);\n\n    setLocalJson(\"worm\", wormBody);\n    setWormBody(wormBody);\n\n    setLocalJson(\"foods\", foodPositions);\n    setFoods(foodPositions);\n  }, [screens]);\n\n  const changeDirectionHandle = useCallback(\n    (key: KeyboardEvent<HTMLDivElement>) => {\n      if (key.key === \"w\" && moveDirection !== \"bottom\") {\n        setMoveDirection(\"top\");\n        localStorage.setItem(\"direction\", \"top\");\n      }\n      if (key.key === \"a\" && moveDirection !== \"right\") {\n        setMoveDirection(\"left\");\n        localStorage.setItem(\"direction\", \"left\");\n      }\n      if (key.key === \"d\" && moveDirection !== \"left\") {\n        setMoveDirection(\"right\");\n        localStorage.setItem(\"direction\", \"right\");\n      }\n      if (key.key === \"s\" && moveDirection !== \"top\") {\n        setMoveDirection(\"bottom\");\n        localStorage.setItem(\"direction\", \"bottom\");\n      }\n    },\n    [moveDirection]\n  );\n\n  const addNewFood = useCallback(\n    (foods: FoodType[]) => {\n      const newFood: number[][] = foods;\n      newFood.push(getRandomItemPosition(screens, blockSize));\n      setLocalJson(\"foods\", newFood);\n      setFoods(newFood);\n    },\n    [screens]\n  );\n\n  const addNewBlock = useCallback(() => {\n    const newWormBody = wormBody;\n    newWormBody.push([-10, -10]);\n    setLocalJson(\"worm\", newWormBody);\n    setWormBody(newWormBody);\n  }, [wormBody]);\n\n  // verify if is root screen\n  const isRoot = useCallback(() => {\n    const starter = localStorage.getItem(\"starter\");\n    if (starter === screenToken.toString()) return true;\n    return false;\n  }, []);\n\n  // reset screens local storage\n  useEffect(() => {\n    localStorage.setItem(\"start\", \"\");\n    localStorage.setItem(\"screens\", \"{}\");\n    localStorage.setItem(\"worm\", \"[]\");\n    localStorage.setItem(\"status\", \"start\");\n  }, []);\n\n  // change view size on resize screen\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      // set new sizes\n      setHorizontal(Math.floor(window.innerWidth / blockSize));\n      setVerical(Math.floor(window.innerHeight / blockSize));\n    });\n  }, [horizontal, vertical]);\n\n  // add worm move by time\n  useEffect(() => {\n    const wormCallback = () => {\n      if (status === \"playing\") {\n        const starter = localStorage.getItem(\"starter\");\n\n        // add worm move\n        if (starter === screenToken.toString()) {\n          const newBody = addWormMove(wormBody, moveDirection);\n          setLocalJson(\"worm\", newBody);\n          setWormBody(newBody);\n        }\n\n        // verify is valid move\n        const isValid = verifyMove(wormBody, screens, blockSize);\n        if (!isValid) {\n          setMoveDirection(\"right\");\n\n          setStatus(\"gameOver\");\n          localStorage.setItem(\"status\", \"gameOver\");\n        }\n\n        // add worm eat action\n        const cleanFoods: number[][] = [...foods];\n        const ateFood: number | boolean = isWormEating(wormBody, foods);\n        if (\n          starter === screenToken.toString() &&\n          ateFood !== false &&\n          ateFood !== true\n        ) {\n          cleanFoods.splice(ateFood, 1);\n          setLocalJson(\"foods\", cleanFoods);\n          setFoods(cleanFoods);\n\n          addNewFood(cleanFoods);\n          addNewBlock();\n        }\n      }\n    };\n\n    const intervalId = setInterval(wormCallback, 100);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [wormBody, foods, moveDirection]);\n\n  // change view position by time\n  useEffect(() => {\n    const updateWindowPosition = () => {\n      setLeft(Math.round(window.screenX));\n      setTop(Math.round(window.screenY));\n\n      const screens = getLocalJson(\"screens\");\n      screens[screenToken] = { left, top, horizontal, vertical };\n      setScreens(screens);\n      setLocalJson(\"screens\", screens);\n    };\n\n    const intervalId = setInterval(updateWindowPosition, 50);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [horizontal, vertical, top, left]);\n\n  // on change local storage\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setFoods(getLocalJson(\"foods\") ?? []);\n      setWormBody(getLocalJson(\"worm\") ?? []);\n      setDetails(getLocalJson(\"details\"));\n\n      const status = localStorage.getItem(\"status\");\n      if (status === \"gameOver\" || status === \"start\" || status === \"playing\")\n        setStatus(status);\n\n      const direction = localStorage.getItem(\"direction\");\n      if (\n        direction === \"left\" ||\n        direction === \"right\" ||\n        direction === \"top\" ||\n        direction === \"bottom\"\n      ) {\n        setMoveDirection(direction);\n        localStorage.setItem(\"direction\", direction);\n      }\n\n      const newScreens = getLocalJson(\"screens\");\n      newScreens[screenToken] = screens[screenToken];\n\n      setScreens(newScreens);\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n\n    return () => {\n      window.removeEventListener(\"storage\", handleStorageChange);\n    };\n  }, [screens]);\n\n  // build return values\n  const contextValue = useMemo(\n    () => ({\n      blockSize,\n      left,\n      top,\n      horizontal,\n      vertical,\n      status,\n      docRef,\n      isRoot,\n      startGame,\n      foods,\n      screens,\n      wormBody,\n      details,\n      moveDirection,\n      changeDirectionHandle,\n    }),\n    [\n      blockSize,\n      left,\n      top,\n      horizontal,\n      vertical,\n      status,\n      docRef,\n      isRoot,\n      startGame,\n      foods,\n      screens,\n      wormBody,\n      details,\n      moveDirection,\n      changeDirectionHandle,\n    ]\n  );\n\n  return (\n    <MainContext.Provider value={contextValue}>{children}</MainContext.Provider>\n  );\n}\n\nexport const useMainContext = () => useContext(MainContext);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}