{"ast":null,"code":"/**\n * local storage\n */export function getLocalJson(item){const data=localStorage.getItem(item);if(data){return JSON.parse(data);}else{return undefined;}}export function setLocalJson(item,value){localStorage.setItem(item,JSON.stringify(value));}/**\n * food auxiar functions\n */export function getRandomItemPosition(screens,size){const keys=Object.keys(screens);const locations=[];keys.forEach(item=>{const screen=screens[item];locations.push([[Math.round(screen.left/size)+1,Math.round(screen.left/size)+screen.horizontal-1],[Math.round(screen.top/size)+1,Math.round(screen.top/size)+screen.vertical-1]]);});const location=getRandomArrayItem(locations);return getRandomPosition(location);}/**\n * worm auxiar functions\n */export function addWormMove(body,direction){let newBody=[];// verify worm direction and set move\nbody.forEach((element,index)=>{if(index===0){if(direction===\"right\"){newBody.push([element[0]+1,element[1]]);}if(direction===\"left\"){newBody.push([element[0]-1,element[1]]);}if(direction===\"top\"){newBody.push([element[0],element[1]-1]);}if(direction===\"bottom\"){newBody.push([element[0],element[1]+1]);}}else{newBody.push([body[index-1][0],body[index-1][1]]);}});return newBody;}export function verifyMove(body,screens,size){var _localStorage$getItem,_screens$starter,_screens$starter2,_screens$starter3,_screens$starter4,_screens$starter5,_screens$starter6;// validate self body\nlet status=true;body.some((item,index)=>{if(item[0]===body[0][0]&&item[1]===body[0][1]&&index!==0)status=false;});if(!status)return false;// validate is out of max screen limit\nconst keys=Object.keys(screens);const starter=(_localStorage$getItem=localStorage.getItem(\"starter\"))!==null&&_localStorage$getItem!==void 0?_localStorage$getItem:\"\";let maxLeft=Math.round(((_screens$starter=screens[starter])===null||_screens$starter===void 0?void 0:_screens$starter.left)/size);let maxRight=Math.round(((_screens$starter2=screens[starter])===null||_screens$starter2===void 0?void 0:_screens$starter2.left)/size+((_screens$starter3=screens[starter])===null||_screens$starter3===void 0?void 0:_screens$starter3.horizontal));let maxTop=Math.round(((_screens$starter4=screens[starter])===null||_screens$starter4===void 0?void 0:_screens$starter4.top)/size);let maxBottom=Math.round(((_screens$starter5=screens[starter])===null||_screens$starter5===void 0?void 0:_screens$starter5.top)/size+((_screens$starter6=screens[starter])===null||_screens$starter6===void 0?void 0:_screens$starter6.vertical));// re-set max values\nkeys.forEach((key,index)=>{const screen=screens[key];if(Math.round((screen===null||screen===void 0?void 0:screen.left)/size)<maxLeft)maxLeft=Math.round((screen===null||screen===void 0?void 0:screen.left)/size);if(Math.round((screen===null||screen===void 0?void 0:screen.left)/size+(screen===null||screen===void 0?void 0:screen.horizontal))>maxRight)maxRight=Math.round((screen===null||screen===void 0?void 0:screen.left)/size+(screen===null||screen===void 0?void 0:screen.horizontal));if(Math.round((screen===null||screen===void 0?void 0:screen.top)/size)<maxTop)maxTop=Math.round((screen===null||screen===void 0?void 0:screen.top)/size);if(Math.round((screen===null||screen===void 0?void 0:screen.top)/size+(screen===null||screen===void 0?void 0:screen.vertical))>maxBottom)maxBottom=Math.round((screen===null||screen===void 0?void 0:screen.top)/size+(screen===null||screen===void 0?void 0:screen.vertical));});// verify by max values\nif(body.length>0){if(body[0][0]<maxLeft)return false;if(body[0][0]>maxRight)return false;if(body[0][1]<maxTop)return false;if(body[0][1]>maxBottom)return false;}return true;}export function isWormEating(body,foods){if(body.length>0&&foods.length>0){let value=false;foods.some((item,index)=>{if(item[0]===body[0][0]&&item[1]===body[0][1])value=index;});return value;}return false;}export function getBlockDirection(worm,index){const before=worm[index-1];const current=worm[index];if(before[0]>current[0])return\"right\";if(before[1]>current[1])return\"bottom\";if(before[0]<current[0])return\"left\";return\"top\";}/**\n * utils\n */export function getRandomToken(){const random=Math.floor(Math.random()*100000);return random.toString();}function getRandomArrayItem(array){if(array.length===0){return undefined;}const randomIndice=Math.floor(Math.random()*array.length);return array[randomIndice];}function getRandomPosition(intervals){const randomNumbers=[];// get random position in interval\nfor(const interval of intervals){const[min,max]=interval;const randomNumber=Math.random()*(max-min)+min;randomNumbers.push(Math.round(randomNumber-1));}return randomNumbers;}","map":{"version":3,"names":["getLocalJson","item","data","localStorage","getItem","JSON","parse","undefined","setLocalJson","value","setItem","stringify","getRandomItemPosition","screens","size","keys","Object","locations","forEach","screen","push","Math","round","left","horizontal","top","vertical","location","getRandomArrayItem","getRandomPosition","addWormMove","body","direction","newBody","element","index","verifyMove","_localStorage$getItem","_screens$starter","_screens$starter2","_screens$starter3","_screens$starter4","_screens$starter5","_screens$starter6","status","some","starter","maxLeft","maxRight","maxTop","maxBottom","key","length","isWormEating","foods","getBlockDirection","worm","before","current","getRandomToken","random","floor","toString","array","randomIndice","intervals","randomNumbers","interval","min","max","randomNumber"],"sources":["/Users/evelyn/Desktop/EVA/GitHub/cobrinha/src/utils/index.tsx"],"sourcesContent":["import { Direction, WormBody, FoodType, Screens } from \"../types\";\n\n/**\n * local storage\n */\nexport function getLocalJson(item: string) {\n  const data = localStorage.getItem(item);\n\n  if (data) {\n    return JSON.parse(data);\n  } else {\n    return undefined;\n  }\n}\n\nexport function setLocalJson(item: string, value: any) {\n  localStorage.setItem(item, JSON.stringify(value));\n}\n\n/**\n * food auxiar functions\n */\nexport function getRandomItemPosition(screens: Screens, size: number) {\n  const keys = Object.keys(screens);\n\n  const locations: number[][][] = [];\n\n  keys.forEach((item) => {\n    const screen = screens[item];\n    locations.push([\n      [\n        Math.round(screen.left / size) + 1,\n        Math.round(screen.left / size) + screen.horizontal - 1,\n      ],\n      [\n        Math.round(screen.top / size) + 1,\n        Math.round(screen.top / size) + screen.vertical - 1,\n      ],\n    ]);\n  });\n\n  const location = getRandomArrayItem(locations);\n\n  return getRandomPosition(location);\n}\n\n/**\n * worm auxiar functions\n */\nexport function addWormMove(body: WormBody, direction: Direction) {\n  let newBody: WormBody = [];\n\n  // verify worm direction and set move\n  body.forEach((element, index) => {\n    if (index === 0) {\n      if (direction === \"right\") {\n        newBody.push([element[0] + 1, element[1]]);\n      }\n      if (direction === \"left\") {\n        newBody.push([element[0] - 1, element[1]]);\n      }\n      if (direction === \"top\") {\n        newBody.push([element[0], element[1] - 1]);\n      }\n      if (direction === \"bottom\") {\n        newBody.push([element[0], element[1] + 1]);\n      }\n    } else {\n      newBody.push([body[index - 1][0], body[index - 1][1]]);\n    }\n  });\n\n  return newBody;\n}\n\nexport function verifyMove(body: WormBody, screens: Screens, size: number) {\n  // validate self body\n  let status = true;\n  body.some((item, index) => {\n    if (item[0] === body[0][0] && item[1] === body[0][1] && index !== 0)\n      status = false;\n  });\n\n  if (!status) return false;\n\n  // validate is out of max screen limit\n  const keys = Object.keys(screens);\n  const starter = localStorage.getItem(\"starter\") ?? \"\";\n\n  let maxLeft = Math.round(screens[starter]?.left / size);\n  let maxRight = Math.round(\n    screens[starter]?.left / size + screens[starter]?.horizontal\n  );\n  let maxTop = Math.round(screens[starter]?.top / size);\n  let maxBottom = Math.round(\n    screens[starter]?.top / size + screens[starter]?.vertical\n  );\n\n  // re-set max values\n  keys.forEach((key, index) => {\n    const screen = screens[key];\n    if (Math.round(screen?.left / size) < maxLeft)\n      maxLeft = Math.round(screen?.left / size);\n    if (Math.round(screen?.left / size + screen?.horizontal) > maxRight)\n      maxRight = Math.round(screen?.left / size + screen?.horizontal);\n    if (Math.round(screen?.top / size) < maxTop)\n      maxTop = Math.round(screen?.top / size);\n    if (Math.round(screen?.top / size + screen?.vertical) > maxBottom)\n      maxBottom = Math.round(screen?.top / size + screen?.vertical);\n  });\n\n  // verify by max values\n  if (body.length > 0) {\n    if (body[0][0] < maxLeft) return false;\n    if (body[0][0] > maxRight) return false;\n    if (body[0][1] < maxTop) return false;\n    if (body[0][1] > maxBottom) return false;\n  }\n\n  return true;\n}\n\nexport function isWormEating(body: WormBody, foods: FoodType[]) {\n  if (body.length > 0 && foods.length > 0) {\n    let value: number | boolean = false;\n    foods.some((item, index) => {\n      if (item[0] === body[0][0] && item[1] === body[0][1]) value = index;\n    });\n    return value;\n  }\n  return false;\n}\n\nexport function getBlockDirection(worm: WormBody, index: number) {\n  const before = worm[index - 1];\n  const current = worm[index];\n\n  if (before[0] > current[0]) return \"right\";\n  if (before[1] > current[1]) return \"bottom\";\n  if (before[0] < current[0]) return \"left\";\n  return \"top\";\n}\n\n/**\n * utils\n */\nexport function getRandomToken() {\n  const random = Math.floor(Math.random() * 100000);\n  return random.toString();\n}\n\nfunction getRandomArrayItem(array: any[]) {\n  if (array.length === 0) {\n    return undefined;\n  }\n\n  const randomIndice = Math.floor(Math.random() * array.length);\n  return array[randomIndice];\n}\n\nfunction getRandomPosition(intervals: number[][]): number[] {\n  const randomNumbers: number[] = [];\n\n  // get random position in interval\n  for (const interval of intervals) {\n    const [min, max] = interval;\n    const randomNumber = Math.random() * (max - min) + min;\n    randomNumbers.push(Math.round(randomNumber - 1));\n  }\n\n  return randomNumbers;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}