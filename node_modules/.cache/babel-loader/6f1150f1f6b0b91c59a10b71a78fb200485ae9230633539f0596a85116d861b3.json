{"ast":null,"code":"import{useMemo,useContext,createContext,useState,useEffect,useCallback,useRef}from\"react\";import{addWormMove,getLocalJson,getRandomItemPosition,getRandomToken,isWormEating,setLocalJson,verifyMove}from\"../utils\";import{jsx as _jsx}from\"react/jsx-runtime\";const screenToken=getRandomToken();export const MainContext=/*#__PURE__*/createContext({});export function MainProvider(_ref){let{children}=_ref;const blockSize=30;const docRef=useRef(null);// scene options\nconst[status,setStatus]=useState(\"start\");const[screens,setScreens]=useState({});const[details,setDetails]=useState([]);const[left,setLeft]=useState(Math.round(window.screenX));const[top,setTop]=useState(Math.round(window.screenY));const[horizontal,setHorizontal]=useState(Math.floor(window.innerWidth/blockSize));const[vertical,setVerical]=useState(Math.floor(window.innerHeight/blockSize));// worm options\nconst[moveDirection,setMoveDirection]=useState(\"right\");const[wormBody,setWormBody]=useState([]);// food options\nconst[foods,setFoods]=useState([]);const startGame=useCallback(()=>{const foodPositions=[getRandomItemPosition(screens,blockSize),getRandomItemPosition(screens,blockSize)];// set initial direction\nlocalStorage.setItem(\"direction\",\"right\");setMoveDirection(\"right\");// set initial status\nlocalStorage.setItem(\"status\",\"playing\");setStatus(\"playing\");// set main screen\nlocalStorage.setItem(\"starter\",screenToken.toString());// define start worm body\nconst startWormX=Math.round(screens[screenToken].left/blockSize);const startWormY=Math.round(screens[screenToken].top/blockSize);const wormBody=[[startWormX+7,startWormY+7],[startWormX+6,startWormY+7],[startWormX+5,startWormY+7]];const details=[getRandomItemPosition(screens,blockSize),getRandomItemPosition(screens,blockSize),getRandomItemPosition(screens,blockSize),getRandomItemPosition(screens,blockSize)];// set initial details\nsetLocalJson(\"details\",details);setDetails(details);setLocalJson(\"worm\",wormBody);setWormBody(wormBody);setLocalJson(\"foods\",foodPositions);setFoods(foodPositions);},[screens]);const changeDirectionHandle=useCallback(key=>{if(key.key===\"w\"&&moveDirection!==\"bottom\"){setMoveDirection(\"top\");localStorage.setItem(\"direction\",\"top\");}if(key.key===\"a\"&&moveDirection!==\"right\"){setMoveDirection(\"left\");localStorage.setItem(\"direction\",\"left\");}if(key.key===\"d\"&&moveDirection!==\"left\"){setMoveDirection(\"right\");localStorage.setItem(\"direction\",\"right\");}if(key.key===\"s\"&&moveDirection!==\"top\"){setMoveDirection(\"bottom\");localStorage.setItem(\"direction\",\"bottom\");}},[moveDirection]);const addNewFood=useCallback(foods=>{const newFood=foods;newFood.push(getRandomItemPosition(screens,blockSize));setLocalJson(\"foods\",newFood);setFoods(newFood);},[screens]);const addNewBlock=useCallback(()=>{const newWormBody=wormBody;newWormBody.push([-10,-10]);setLocalJson(\"worm\",newWormBody);setWormBody(newWormBody);},[wormBody]);// verify if is root screen\nconst isRoot=useCallback(()=>{const starter=localStorage.getItem(\"starter\");if(starter===screenToken.toString())return true;return false;},[]);// reset screens local storage\nuseEffect(()=>{localStorage.setItem(\"start\",\"\");localStorage.setItem(\"screens\",\"{}\");localStorage.setItem(\"worm\",\"[]\");localStorage.setItem(\"status\",\"start\");},[]);// change view size on resize screen\nuseEffect(()=>{window.addEventListener(\"resize\",()=>{// set new sizes\nsetHorizontal(Math.floor(window.innerWidth/blockSize));setVerical(Math.floor(window.innerHeight/blockSize));});},[horizontal,vertical]);// add worm move by time\nuseEffect(()=>{const wormCallback=()=>{if(status===\"playing\"){const starter=localStorage.getItem(\"starter\");// add worm move\nif(starter===screenToken.toString()){const newBody=addWormMove(wormBody,moveDirection);setLocalJson(\"worm\",newBody);setWormBody(newBody);}// verify is valid move\nconst isValid=verifyMove(wormBody,screens,blockSize);if(!isValid){setMoveDirection(\"right\");setStatus(\"gameOver\");localStorage.setItem(\"status\",\"gameOver\");}// add worm eat action\nconst cleanFoods=[...foods];const ateFood=isWormEating(wormBody,foods);if(starter===screenToken.toString()&&ateFood!==false&&ateFood!==true){cleanFoods.splice(ateFood,1);setLocalJson(\"foods\",cleanFoods);setFoods(cleanFoods);addNewFood(cleanFoods);addNewBlock();}}};const intervalId=setInterval(wormCallback,100);return()=>{clearInterval(intervalId);};},[wormBody,foods,moveDirection]);// change view position by time\nuseEffect(()=>{const updateWindowPosition=()=>{setLeft(Math.round(window.screenX));setTop(Math.round(window.screenY));const screens=getLocalJson(\"screens\");screens[screenToken]={left,top,horizontal,vertical};setScreens(screens);setLocalJson(\"screens\",screens);};const intervalId=setInterval(updateWindowPosition,50);return()=>{clearInterval(intervalId);};},[horizontal,vertical,top,left]);// on change local storage\nuseEffect(()=>{const handleStorageChange=()=>{var _getLocalJson,_getLocalJson2;setFoods((_getLocalJson=getLocalJson(\"foods\"))!==null&&_getLocalJson!==void 0?_getLocalJson:[]);setWormBody((_getLocalJson2=getLocalJson(\"worm\"))!==null&&_getLocalJson2!==void 0?_getLocalJson2:[]);setDetails(getLocalJson(\"details\"));const status=localStorage.getItem(\"status\");if(status===\"gameOver\"||status===\"start\"||status===\"playing\")setStatus(status);const direction=localStorage.getItem(\"direction\");if(direction===\"left\"||direction===\"right\"||direction===\"top\"||direction===\"bottom\"){setMoveDirection(direction);localStorage.setItem(\"direction\",direction);}const newScreens=getLocalJson(\"screens\");newScreens[screenToken]=screens[screenToken];setScreens(newScreens);};window.addEventListener(\"storage\",handleStorageChange);return()=>{window.removeEventListener(\"storage\",handleStorageChange);};},[screens]);// build return values\nconst contextValue=useMemo(()=>({blockSize,left,top,horizontal,vertical,status,docRef,isRoot,startGame,foods,screens,wormBody,details,moveDirection,changeDirectionHandle}),[blockSize,left,top,horizontal,vertical,status,docRef,isRoot,startGame,foods,screens,wormBody,details,moveDirection,changeDirectionHandle]);return/*#__PURE__*/_jsx(MainContext.Provider,{value:contextValue,children:children});}export const useMainContext=()=>useContext(MainContext);","map":{"version":3,"names":["useMemo","useContext","createContext","useState","useEffect","useCallback","useRef","addWormMove","getLocalJson","getRandomItemPosition","getRandomToken","isWormEating","setLocalJson","verifyMove","jsx","_jsx","screenToken","MainContext","MainProvider","_ref","children","blockSize","docRef","status","setStatus","screens","setScreens","details","setDetails","left","setLeft","Math","round","window","screenX","top","setTop","screenY","horizontal","setHorizontal","floor","innerWidth","vertical","setVerical","innerHeight","moveDirection","setMoveDirection","wormBody","setWormBody","foods","setFoods","startGame","foodPositions","localStorage","setItem","toString","startWormX","startWormY","changeDirectionHandle","key","addNewFood","newFood","push","addNewBlock","newWormBody","isRoot","starter","getItem","addEventListener","wormCallback","newBody","isValid","cleanFoods","ateFood","splice","intervalId","setInterval","clearInterval","updateWindowPosition","handleStorageChange","_getLocalJson","_getLocalJson2","direction","newScreens","removeEventListener","contextValue","Provider","value","useMainContext"],"sources":["/Users/evelyn/Desktop/EVA/GitHub/cobrinha/src/context/mainContext.tsx"],"sourcesContent":["import {\n  useMemo,\n  useContext,\n  createContext,\n  useState,\n  useEffect,\n  useCallback,\n  KeyboardEvent,\n  useRef,\n} from \"react\";\n\nimport {\n  addWormMove,\n  getLocalJson,\n  getRandomItemPosition,\n  getRandomToken,\n  isWormEating,\n  setLocalJson,\n  verifyMove,\n} from \"../utils\";\nimport { MainContextProps, MainProviderProps } from \"./types\";\nimport { Direction, FoodType, Screens, Status, WormBody } from \"../types\";\n\nconst screenToken = getRandomToken();\n\nexport const MainContext = createContext({} as MainContextProps);\n\nexport function MainProvider({ children }: MainProviderProps) {\n  const blockSize = 30;\n  const docRef = useRef(null);\n\n  // scene options\n  const [status, setStatus] = useState<Status>(\"start\");\n  const [screens, setScreens] = useState<Screens>({});\n  const [details, setDetails] = useState<number[][]>([]);\n  const [left, setLeft] = useState(Math.round(window.screenX));\n  const [top, setTop] = useState(Math.round(window.screenY));\n  const [horizontal, setHorizontal] = useState(\n    Math.floor(window.innerWidth / blockSize)\n  );\n  const [vertical, setVerical] = useState(\n    Math.floor(window.innerHeight / blockSize)\n  );\n\n  // worm options\n  const [moveDirection, setMoveDirection] = useState<Direction>(\"right\");\n  const [wormBody, setWormBody] = useState<WormBody>([]);\n\n  // food options\n  const [foods, setFoods] = useState<FoodType[]>([]);\n\n  const startGame = useCallback(() => {\n    const foodPositions = [\n      getRandomItemPosition(screens, blockSize),\n      getRandomItemPosition(screens, blockSize),\n    ];\n\n    // set initial direction\n    localStorage.setItem(\"direction\", \"right\");\n    setMoveDirection(\"right\");\n\n    // set initial status\n    localStorage.setItem(\"status\", \"playing\");\n    setStatus(\"playing\");\n\n    // set main screen\n    localStorage.setItem(\"starter\", screenToken.toString());\n\n    // define start worm body\n    const startWormX = Math.round(screens[screenToken].left / blockSize);\n    const startWormY = Math.round(screens[screenToken].top / blockSize);\n    const wormBody = [\n      [startWormX + 7, startWormY + 7],\n      [startWormX + 6, startWormY + 7],\n      [startWormX + 5, startWormY + 7],\n    ];\n    const details = [\n      getRandomItemPosition(screens, blockSize),\n      getRandomItemPosition(screens, blockSize),\n      getRandomItemPosition(screens, blockSize),\n      getRandomItemPosition(screens, blockSize),\n    ];\n\n    // set initial details\n    setLocalJson(\"details\", details);\n    setDetails(details);\n\n    setLocalJson(\"worm\", wormBody);\n    setWormBody(wormBody);\n\n    setLocalJson(\"foods\", foodPositions);\n    setFoods(foodPositions);\n  }, [screens]);\n\n  const changeDirectionHandle = useCallback(\n    (key: KeyboardEvent<HTMLDivElement>) => {\n      if (key.key === \"w\" && moveDirection !== \"bottom\") {\n        setMoveDirection(\"top\");\n        localStorage.setItem(\"direction\", \"top\");\n      }\n      if (key.key === \"a\" && moveDirection !== \"right\") {\n        setMoveDirection(\"left\");\n        localStorage.setItem(\"direction\", \"left\");\n      }\n      if (key.key === \"d\" && moveDirection !== \"left\") {\n        setMoveDirection(\"right\");\n        localStorage.setItem(\"direction\", \"right\");\n      }\n      if (key.key === \"s\" && moveDirection !== \"top\") {\n        setMoveDirection(\"bottom\");\n        localStorage.setItem(\"direction\", \"bottom\");\n      }\n    },\n    [moveDirection]\n  );\n\n  const addNewFood = useCallback(\n    (foods: FoodType[]) => {\n      const newFood: number[][] = foods;\n      newFood.push(getRandomItemPosition(screens, blockSize));\n      setLocalJson(\"foods\", newFood);\n      setFoods(newFood);\n    },\n    [screens]\n  );\n\n  const addNewBlock = useCallback(() => {\n    const newWormBody = wormBody;\n    newWormBody.push([-10, -10]);\n    setLocalJson(\"worm\", newWormBody);\n    setWormBody(newWormBody);\n  }, [wormBody]);\n\n  // verify if is root screen\n  const isRoot = useCallback(() => {\n    const starter = localStorage.getItem(\"starter\");\n    if (starter === screenToken.toString()) return true;\n    return false;\n  }, []);\n\n  // reset screens local storage\n  useEffect(() => {\n    localStorage.setItem(\"start\", \"\");\n    localStorage.setItem(\"screens\", \"{}\");\n    localStorage.setItem(\"worm\", \"[]\");\n    localStorage.setItem(\"status\", \"start\");\n  }, []);\n\n  // change view size on resize screen\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      // set new sizes\n      setHorizontal(Math.floor(window.innerWidth / blockSize));\n      setVerical(Math.floor(window.innerHeight / blockSize));\n    });\n  }, [horizontal, vertical]);\n\n  // add worm move by time\n  useEffect(() => {\n    const wormCallback = () => {\n      if (status === \"playing\") {\n        const starter = localStorage.getItem(\"starter\");\n\n        // add worm move\n        if (starter === screenToken.toString()) {\n          const newBody = addWormMove(wormBody, moveDirection);\n          setLocalJson(\"worm\", newBody);\n          setWormBody(newBody);\n        }\n\n        // verify is valid move\n        const isValid = verifyMove(wormBody, screens, blockSize);\n        if (!isValid) {\n          setMoveDirection(\"right\");\n\n          setStatus(\"gameOver\");\n          localStorage.setItem(\"status\", \"gameOver\");\n        }\n\n        // add worm eat action\n        const cleanFoods: number[][] = [...foods];\n        const ateFood: number | boolean = isWormEating(wormBody, foods);\n        if (\n          starter === screenToken.toString() &&\n          ateFood !== false &&\n          ateFood !== true\n        ) {\n          cleanFoods.splice(ateFood, 1);\n          setLocalJson(\"foods\", cleanFoods);\n          setFoods(cleanFoods);\n\n          addNewFood(cleanFoods);\n          addNewBlock();\n        }\n      }\n    };\n\n    const intervalId = setInterval(wormCallback, 100);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [wormBody, foods, moveDirection]);\n\n  // change view position by time\n  useEffect(() => {\n    const updateWindowPosition = () => {\n      setLeft(Math.round(window.screenX));\n      setTop(Math.round(window.screenY));\n\n      const screens = getLocalJson(\"screens\");\n      screens[screenToken] = { left, top, horizontal, vertical };\n      setScreens(screens);\n      setLocalJson(\"screens\", screens);\n    };\n\n    const intervalId = setInterval(updateWindowPosition, 50);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [horizontal, vertical, top, left]);\n\n  // on change local storage\n  useEffect(() => {\n    const handleStorageChange = () => {\n      setFoods(getLocalJson(\"foods\") ?? []);\n      setWormBody(getLocalJson(\"worm\") ?? []);\n      setDetails(getLocalJson(\"details\"));\n\n      const status = localStorage.getItem(\"status\");\n      if (status === \"gameOver\" || status === \"start\" || status === \"playing\")\n        setStatus(status);\n\n      const direction = localStorage.getItem(\"direction\");\n      if (\n        direction === \"left\" ||\n        direction === \"right\" ||\n        direction === \"top\" ||\n        direction === \"bottom\"\n      ) {\n        setMoveDirection(direction);\n        localStorage.setItem(\"direction\", direction);\n      }\n\n      const newScreens = getLocalJson(\"screens\");\n      newScreens[screenToken] = screens[screenToken];\n\n      setScreens(newScreens);\n    };\n\n    window.addEventListener(\"storage\", handleStorageChange);\n\n    return () => {\n      window.removeEventListener(\"storage\", handleStorageChange);\n    };\n  }, [screens]);\n\n  // build return values\n  const contextValue = useMemo(\n    () => ({\n      blockSize,\n      left,\n      top,\n      horizontal,\n      vertical,\n      status,\n      docRef,\n      isRoot,\n      startGame,\n      foods,\n      screens,\n      wormBody,\n      details,\n      moveDirection,\n      changeDirectionHandle,\n    }),\n    [\n      blockSize,\n      left,\n      top,\n      horizontal,\n      vertical,\n      status,\n      docRef,\n      isRoot,\n      startGame,\n      foods,\n      screens,\n      wormBody,\n      details,\n      moveDirection,\n      changeDirectionHandle,\n    ]\n  );\n\n  return (\n    <MainContext.Provider value={contextValue}>{children}</MainContext.Provider>\n  );\n}\n\nexport const useMainContext = () => useContext(MainContext);\n"],"mappings":"AAAA,OACEA,OAAO,CACPC,UAAU,CACVC,aAAa,CACbC,QAAQ,CACRC,SAAS,CACTC,WAAW,CAEXC,MAAM,KACD,OAAO,CAEd,OACEC,WAAW,CACXC,YAAY,CACZC,qBAAqB,CACrBC,cAAc,CACdC,YAAY,CACZC,YAAY,CACZC,UAAU,KACL,UAAU,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAIlB,KAAM,CAAAC,WAAW,CAAGN,cAAc,CAAC,CAAC,CAEpC,MAAO,MAAM,CAAAO,WAAW,cAAGf,aAAa,CAAC,CAAC,CAAqB,CAAC,CAEhE,MAAO,SAAS,CAAAgB,YAAYA,CAAAC,IAAA,CAAkC,IAAjC,CAAEC,QAA4B,CAAC,CAAAD,IAAA,CAC1D,KAAM,CAAAE,SAAS,CAAG,EAAE,CACpB,KAAM,CAAAC,MAAM,CAAGhB,MAAM,CAAC,IAAI,CAAC,CAE3B;AACA,KAAM,CAACiB,MAAM,CAAEC,SAAS,CAAC,CAAGrB,QAAQ,CAAS,OAAO,CAAC,CACrD,KAAM,CAACsB,OAAO,CAAEC,UAAU,CAAC,CAAGvB,QAAQ,CAAU,CAAC,CAAC,CAAC,CACnD,KAAM,CAACwB,OAAO,CAAEC,UAAU,CAAC,CAAGzB,QAAQ,CAAa,EAAE,CAAC,CACtD,KAAM,CAAC0B,IAAI,CAAEC,OAAO,CAAC,CAAG3B,QAAQ,CAAC4B,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,CAAC,CAC5D,KAAM,CAACC,GAAG,CAAEC,MAAM,CAAC,CAAGjC,QAAQ,CAAC4B,IAAI,CAACC,KAAK,CAACC,MAAM,CAACI,OAAO,CAAC,CAAC,CAC1D,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGpC,QAAQ,CAC1C4B,IAAI,CAACS,KAAK,CAACP,MAAM,CAACQ,UAAU,CAAGpB,SAAS,CAC1C,CAAC,CACD,KAAM,CAACqB,QAAQ,CAAEC,UAAU,CAAC,CAAGxC,QAAQ,CACrC4B,IAAI,CAACS,KAAK,CAACP,MAAM,CAACW,WAAW,CAAGvB,SAAS,CAC3C,CAAC,CAED;AACA,KAAM,CAACwB,aAAa,CAAEC,gBAAgB,CAAC,CAAG3C,QAAQ,CAAY,OAAO,CAAC,CACtE,KAAM,CAAC4C,QAAQ,CAAEC,WAAW,CAAC,CAAG7C,QAAQ,CAAW,EAAE,CAAC,CAEtD;AACA,KAAM,CAAC8C,KAAK,CAAEC,QAAQ,CAAC,CAAG/C,QAAQ,CAAa,EAAE,CAAC,CAElD,KAAM,CAAAgD,SAAS,CAAG9C,WAAW,CAAC,IAAM,CAClC,KAAM,CAAA+C,aAAa,CAAG,CACpB3C,qBAAqB,CAACgB,OAAO,CAAEJ,SAAS,CAAC,CACzCZ,qBAAqB,CAACgB,OAAO,CAAEJ,SAAS,CAAC,CAC1C,CAED;AACAgC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAE,OAAO,CAAC,CAC1CR,gBAAgB,CAAC,OAAO,CAAC,CAEzB;AACAO,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAE,SAAS,CAAC,CACzC9B,SAAS,CAAC,SAAS,CAAC,CAEpB;AACA6B,YAAY,CAACC,OAAO,CAAC,SAAS,CAAEtC,WAAW,CAACuC,QAAQ,CAAC,CAAC,CAAC,CAEvD;AACA,KAAM,CAAAC,UAAU,CAAGzB,IAAI,CAACC,KAAK,CAACP,OAAO,CAACT,WAAW,CAAC,CAACa,IAAI,CAAGR,SAAS,CAAC,CACpE,KAAM,CAAAoC,UAAU,CAAG1B,IAAI,CAACC,KAAK,CAACP,OAAO,CAACT,WAAW,CAAC,CAACmB,GAAG,CAAGd,SAAS,CAAC,CACnE,KAAM,CAAA0B,QAAQ,CAAG,CACf,CAACS,UAAU,CAAG,CAAC,CAAEC,UAAU,CAAG,CAAC,CAAC,CAChC,CAACD,UAAU,CAAG,CAAC,CAAEC,UAAU,CAAG,CAAC,CAAC,CAChC,CAACD,UAAU,CAAG,CAAC,CAAEC,UAAU,CAAG,CAAC,CAAC,CACjC,CACD,KAAM,CAAA9B,OAAO,CAAG,CACdlB,qBAAqB,CAACgB,OAAO,CAAEJ,SAAS,CAAC,CACzCZ,qBAAqB,CAACgB,OAAO,CAAEJ,SAAS,CAAC,CACzCZ,qBAAqB,CAACgB,OAAO,CAAEJ,SAAS,CAAC,CACzCZ,qBAAqB,CAACgB,OAAO,CAAEJ,SAAS,CAAC,CAC1C,CAED;AACAT,YAAY,CAAC,SAAS,CAAEe,OAAO,CAAC,CAChCC,UAAU,CAACD,OAAO,CAAC,CAEnBf,YAAY,CAAC,MAAM,CAAEmC,QAAQ,CAAC,CAC9BC,WAAW,CAACD,QAAQ,CAAC,CAErBnC,YAAY,CAAC,OAAO,CAAEwC,aAAa,CAAC,CACpCF,QAAQ,CAACE,aAAa,CAAC,CACzB,CAAC,CAAE,CAAC3B,OAAO,CAAC,CAAC,CAEb,KAAM,CAAAiC,qBAAqB,CAAGrD,WAAW,CACtCsD,GAAkC,EAAK,CACtC,GAAIA,GAAG,CAACA,GAAG,GAAK,GAAG,EAAId,aAAa,GAAK,QAAQ,CAAE,CACjDC,gBAAgB,CAAC,KAAK,CAAC,CACvBO,YAAY,CAACC,OAAO,CAAC,WAAW,CAAE,KAAK,CAAC,CAC1C,CACA,GAAIK,GAAG,CAACA,GAAG,GAAK,GAAG,EAAId,aAAa,GAAK,OAAO,CAAE,CAChDC,gBAAgB,CAAC,MAAM,CAAC,CACxBO,YAAY,CAACC,OAAO,CAAC,WAAW,CAAE,MAAM,CAAC,CAC3C,CACA,GAAIK,GAAG,CAACA,GAAG,GAAK,GAAG,EAAId,aAAa,GAAK,MAAM,CAAE,CAC/CC,gBAAgB,CAAC,OAAO,CAAC,CACzBO,YAAY,CAACC,OAAO,CAAC,WAAW,CAAE,OAAO,CAAC,CAC5C,CACA,GAAIK,GAAG,CAACA,GAAG,GAAK,GAAG,EAAId,aAAa,GAAK,KAAK,CAAE,CAC9CC,gBAAgB,CAAC,QAAQ,CAAC,CAC1BO,YAAY,CAACC,OAAO,CAAC,WAAW,CAAE,QAAQ,CAAC,CAC7C,CACF,CAAC,CACD,CAACT,aAAa,CAChB,CAAC,CAED,KAAM,CAAAe,UAAU,CAAGvD,WAAW,CAC3B4C,KAAiB,EAAK,CACrB,KAAM,CAAAY,OAAmB,CAAGZ,KAAK,CACjCY,OAAO,CAACC,IAAI,CAACrD,qBAAqB,CAACgB,OAAO,CAAEJ,SAAS,CAAC,CAAC,CACvDT,YAAY,CAAC,OAAO,CAAEiD,OAAO,CAAC,CAC9BX,QAAQ,CAACW,OAAO,CAAC,CACnB,CAAC,CACD,CAACpC,OAAO,CACV,CAAC,CAED,KAAM,CAAAsC,WAAW,CAAG1D,WAAW,CAAC,IAAM,CACpC,KAAM,CAAA2D,WAAW,CAAGjB,QAAQ,CAC5BiB,WAAW,CAACF,IAAI,CAAC,CAAC,CAAC,EAAE,CAAE,CAAC,EAAE,CAAC,CAAC,CAC5BlD,YAAY,CAAC,MAAM,CAAEoD,WAAW,CAAC,CACjChB,WAAW,CAACgB,WAAW,CAAC,CAC1B,CAAC,CAAE,CAACjB,QAAQ,CAAC,CAAC,CAEd;AACA,KAAM,CAAAkB,MAAM,CAAG5D,WAAW,CAAC,IAAM,CAC/B,KAAM,CAAA6D,OAAO,CAAGb,YAAY,CAACc,OAAO,CAAC,SAAS,CAAC,CAC/C,GAAID,OAAO,GAAKlD,WAAW,CAACuC,QAAQ,CAAC,CAAC,CAAE,MAAO,KAAI,CACnD,MAAO,MAAK,CACd,CAAC,CAAE,EAAE,CAAC,CAEN;AACAnD,SAAS,CAAC,IAAM,CACdiD,YAAY,CAACC,OAAO,CAAC,OAAO,CAAE,EAAE,CAAC,CACjCD,YAAY,CAACC,OAAO,CAAC,SAAS,CAAE,IAAI,CAAC,CACrCD,YAAY,CAACC,OAAO,CAAC,MAAM,CAAE,IAAI,CAAC,CAClCD,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAE,OAAO,CAAC,CACzC,CAAC,CAAE,EAAE,CAAC,CAEN;AACAlD,SAAS,CAAC,IAAM,CACd6B,MAAM,CAACmC,gBAAgB,CAAC,QAAQ,CAAE,IAAM,CACtC;AACA7B,aAAa,CAACR,IAAI,CAACS,KAAK,CAACP,MAAM,CAACQ,UAAU,CAAGpB,SAAS,CAAC,CAAC,CACxDsB,UAAU,CAACZ,IAAI,CAACS,KAAK,CAACP,MAAM,CAACW,WAAW,CAAGvB,SAAS,CAAC,CAAC,CACxD,CAAC,CAAC,CACJ,CAAC,CAAE,CAACiB,UAAU,CAAEI,QAAQ,CAAC,CAAC,CAE1B;AACAtC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAiE,YAAY,CAAGA,CAAA,GAAM,CACzB,GAAI9C,MAAM,GAAK,SAAS,CAAE,CACxB,KAAM,CAAA2C,OAAO,CAAGb,YAAY,CAACc,OAAO,CAAC,SAAS,CAAC,CAE/C;AACA,GAAID,OAAO,GAAKlD,WAAW,CAACuC,QAAQ,CAAC,CAAC,CAAE,CACtC,KAAM,CAAAe,OAAO,CAAG/D,WAAW,CAACwC,QAAQ,CAAEF,aAAa,CAAC,CACpDjC,YAAY,CAAC,MAAM,CAAE0D,OAAO,CAAC,CAC7BtB,WAAW,CAACsB,OAAO,CAAC,CACtB,CAEA;AACA,KAAM,CAAAC,OAAO,CAAG1D,UAAU,CAACkC,QAAQ,CAAEtB,OAAO,CAAEJ,SAAS,CAAC,CACxD,GAAI,CAACkD,OAAO,CAAE,CACZzB,gBAAgB,CAAC,OAAO,CAAC,CAEzBtB,SAAS,CAAC,UAAU,CAAC,CACrB6B,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAE,UAAU,CAAC,CAC5C,CAEA;AACA,KAAM,CAAAkB,UAAsB,CAAG,CAAC,GAAGvB,KAAK,CAAC,CACzC,KAAM,CAAAwB,OAAyB,CAAG9D,YAAY,CAACoC,QAAQ,CAAEE,KAAK,CAAC,CAC/D,GACEiB,OAAO,GAAKlD,WAAW,CAACuC,QAAQ,CAAC,CAAC,EAClCkB,OAAO,GAAK,KAAK,EACjBA,OAAO,GAAK,IAAI,CAChB,CACAD,UAAU,CAACE,MAAM,CAACD,OAAO,CAAE,CAAC,CAAC,CAC7B7D,YAAY,CAAC,OAAO,CAAE4D,UAAU,CAAC,CACjCtB,QAAQ,CAACsB,UAAU,CAAC,CAEpBZ,UAAU,CAACY,UAAU,CAAC,CACtBT,WAAW,CAAC,CAAC,CACf,CACF,CACF,CAAC,CAED,KAAM,CAAAY,UAAU,CAAGC,WAAW,CAACP,YAAY,CAAE,GAAG,CAAC,CAEjD,MAAO,IAAM,CACXQ,aAAa,CAACF,UAAU,CAAC,CAC3B,CAAC,CACH,CAAC,CAAE,CAAC5B,QAAQ,CAAEE,KAAK,CAAEJ,aAAa,CAAC,CAAC,CAEpC;AACAzC,SAAS,CAAC,IAAM,CACd,KAAM,CAAA0E,oBAAoB,CAAGA,CAAA,GAAM,CACjChD,OAAO,CAACC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,OAAO,CAAC,CAAC,CACnCE,MAAM,CAACL,IAAI,CAACC,KAAK,CAACC,MAAM,CAACI,OAAO,CAAC,CAAC,CAElC,KAAM,CAAAZ,OAAO,CAAGjB,YAAY,CAAC,SAAS,CAAC,CACvCiB,OAAO,CAACT,WAAW,CAAC,CAAG,CAAEa,IAAI,CAAEM,GAAG,CAAEG,UAAU,CAAEI,QAAS,CAAC,CAC1DhB,UAAU,CAACD,OAAO,CAAC,CACnBb,YAAY,CAAC,SAAS,CAAEa,OAAO,CAAC,CAClC,CAAC,CAED,KAAM,CAAAkD,UAAU,CAAGC,WAAW,CAACE,oBAAoB,CAAE,EAAE,CAAC,CAExD,MAAO,IAAM,CACXD,aAAa,CAACF,UAAU,CAAC,CAC3B,CAAC,CACH,CAAC,CAAE,CAACrC,UAAU,CAAEI,QAAQ,CAAEP,GAAG,CAAEN,IAAI,CAAC,CAAC,CAErC;AACAzB,SAAS,CAAC,IAAM,CACd,KAAM,CAAA2E,mBAAmB,CAAGA,CAAA,GAAM,KAAAC,aAAA,CAAAC,cAAA,CAChC/B,QAAQ,EAAA8B,aAAA,CAACxE,YAAY,CAAC,OAAO,CAAC,UAAAwE,aAAA,UAAAA,aAAA,CAAI,EAAE,CAAC,CACrChC,WAAW,EAAAiC,cAAA,CAACzE,YAAY,CAAC,MAAM,CAAC,UAAAyE,cAAA,UAAAA,cAAA,CAAI,EAAE,CAAC,CACvCrD,UAAU,CAACpB,YAAY,CAAC,SAAS,CAAC,CAAC,CAEnC,KAAM,CAAAe,MAAM,CAAG8B,YAAY,CAACc,OAAO,CAAC,QAAQ,CAAC,CAC7C,GAAI5C,MAAM,GAAK,UAAU,EAAIA,MAAM,GAAK,OAAO,EAAIA,MAAM,GAAK,SAAS,CACrEC,SAAS,CAACD,MAAM,CAAC,CAEnB,KAAM,CAAA2D,SAAS,CAAG7B,YAAY,CAACc,OAAO,CAAC,WAAW,CAAC,CACnD,GACEe,SAAS,GAAK,MAAM,EACpBA,SAAS,GAAK,OAAO,EACrBA,SAAS,GAAK,KAAK,EACnBA,SAAS,GAAK,QAAQ,CACtB,CACApC,gBAAgB,CAACoC,SAAS,CAAC,CAC3B7B,YAAY,CAACC,OAAO,CAAC,WAAW,CAAE4B,SAAS,CAAC,CAC9C,CAEA,KAAM,CAAAC,UAAU,CAAG3E,YAAY,CAAC,SAAS,CAAC,CAC1C2E,UAAU,CAACnE,WAAW,CAAC,CAAGS,OAAO,CAACT,WAAW,CAAC,CAE9CU,UAAU,CAACyD,UAAU,CAAC,CACxB,CAAC,CAEDlD,MAAM,CAACmC,gBAAgB,CAAC,SAAS,CAAEW,mBAAmB,CAAC,CAEvD,MAAO,IAAM,CACX9C,MAAM,CAACmD,mBAAmB,CAAC,SAAS,CAAEL,mBAAmB,CAAC,CAC5D,CAAC,CACH,CAAC,CAAE,CAACtD,OAAO,CAAC,CAAC,CAEb;AACA,KAAM,CAAA4D,YAAY,CAAGrF,OAAO,CAC1B,KAAO,CACLqB,SAAS,CACTQ,IAAI,CACJM,GAAG,CACHG,UAAU,CACVI,QAAQ,CACRnB,MAAM,CACND,MAAM,CACN2C,MAAM,CACNd,SAAS,CACTF,KAAK,CACLxB,OAAO,CACPsB,QAAQ,CACRpB,OAAO,CACPkB,aAAa,CACba,qBACF,CAAC,CAAC,CACF,CACErC,SAAS,CACTQ,IAAI,CACJM,GAAG,CACHG,UAAU,CACVI,QAAQ,CACRnB,MAAM,CACND,MAAM,CACN2C,MAAM,CACNd,SAAS,CACTF,KAAK,CACLxB,OAAO,CACPsB,QAAQ,CACRpB,OAAO,CACPkB,aAAa,CACba,qBAAqB,CAEzB,CAAC,CAED,mBACE3C,IAAA,CAACE,WAAW,CAACqE,QAAQ,EAACC,KAAK,CAAEF,YAAa,CAAAjE,QAAA,CAAEA,QAAQ,CAAuB,CAAC,CAEhF,CAEA,MAAO,MAAM,CAAAoE,cAAc,CAAGA,CAAA,GAAMvF,UAAU,CAACgB,WAAW,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}